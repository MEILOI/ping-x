#!/bin/sh

# PingX Monitor Script v1.1.0
# Purpose: Monitor host ping status and send notifications via Telegram or DingTalk
# Author: TheX
# GitHub: https://github.com/MEILOI/ping-x
# License: MIT
# Version: 1.1.0 (2025-05-24)
# Changelog:
# - v1.1.0: Optimized for iStoreOS/OpenWrt: removed systemd, adapted crontab to /etc/crontabs/root,
#            used /bin/sh, persistent state in /etc/, opkg for dependencies, improved Webhook debug,
#            auto-create /usr/local/bin, larger log size, iStoreOS-specific prompts
# - v1.0.8: Added domain name support, renamed to pingX_monitor, updated menu header
# - v1.0.7: Fixed FAILURE_COUNTS accumulation, added flock, sequential ping
# - v1.0.6: Fixed notification trigger, added view log option, improved crontab logging
# - v1.0.5: Optimized ping detection, added multi-ping per crontab run
# - v1.0.4: Optimized host list display with numbering
# - v1.0.3: Improved host list input
# - v1.0.2: Added list config option
# - v1.0.1: Added Telegram notification support

# Detect OpenWrt/iStoreOS environment
if [ -f /etc/openwrt_release ]; then
    CRONTAB_PATH="/etc/crontabs/root"
    echo "Detected OpenWrt/iStoreOS, using $CRONTAB_PATH for crontab"
else
    CRONTAB_PATH="/etc/crontab"
fi

CONFIG_FILE="/etc/pingX_monitor.conf"
SCRIPT_PATH="/usr/local/bin/pingX_monitor.sh"
STATE_FILE="/etc/pingX_monitor.state" # Persistent for iStoreOS
LOCK_FILE="/var/lock/pingX_monitor.lock"
CRON_JOB="*/1 * * * * root /usr/local/bin/pingX_monitor.sh monitor >> /var/log/pingX_monitor.log 2>&1"
LOG_FILE="/var/log/pingX_monitor.log"
LOG_MAX_SIZE=$((5*1024*1024)) # 5MB for routers
MAX_LOG_FILES=5
TG_API="https://api.telegram.org/bot"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Ensure log file exists
mkdir -p /var/log
touch "$LOG_FILE"

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $1" >> "$LOG_FILE"
    # Rotate log if exceeds max size
    if [ -f "$LOG_FILE" ] && [ "$(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE")" -gt "$LOG_MAX_SIZE" ]; then
        for i in $(seq $((MAX_LOG_FILES-1)) -1 1); do
            if [ -f "$LOG_FILE.$i" ]; then
                mv "$LOG_FILE.$i" "$LOG_FILE.$((i+1))"
            fi
        done
        mv "$LOG_FILE" "$LOG_FILE.1"
        touch "$LOG_FILE"
        log "Log rotated due to size limit"
    fi
}

# Load configuration
load_config() {
    [ -f "$CONFIG_FILE" ] && . "$CONFIG_FILE"
}

# Save configuration
save_config() {
    cat <<EOF > "$CONFIG_FILE"
# PingX Monitor Configuration
NOTIFY_TYPE="$NOTIFY_TYPE"
TG_BOT_TOKEN="$TG_BOT_TOKEN"
TG_CHAT_IDS="$TG_CHAT_IDS"
DINGTALK_WEBHOOK="$DINGTALK_WEBHOOK"
HOSTS_LIST="$HOSTS_LIST"
REMARKS_LIST="$REMARKS_LIST"
INTERVAL="$INTERVAL"
OFFLINE_THRESHOLD="$OFFLINE_THRESHOLD"
EOF
    chmod 600 "$CONFIG_FILE"
    log "Configuration saved to $CONFIG_FILE"
}

# Load state (FAILURE_COUNTS and HOST_STATUS)
load_state() {
    if [ -f "$STATE_FILE" ]; then
        while IFS='=' read -r key value; do
            if echo "$key" | grep -q '^FAILURE_COUNTS_'; then
                host=$(echo "$key" | sed 's/^FAILURE_COUNTS_//')
                FAILURE_COUNTS["$host"]=$value
            elif echo "$key" | grep -q '^HOST_STATUS_'; then
                host=$(echo "$key" | sed 's/^HOST_STATUS_//')
                HOST_STATUS["$host"]=$value
            fi
        done < "$STATE_FILE"
        log "Loaded state from $STATE_FILE"
    fi
}

# Save state
save_state() {
    : > "$STATE_FILE"
    for host in "${!FAILURE_COUNTS[@]}"; do
        echo "FAILURE_COUNTS_$host=${FAILURE_COUNTS[$host]}" >> "$STATE_FILE"
        echo "HOST_STATUS_$host=${HOST_STATUS[$host]}" >> "$STATE_FILE"
    done
    chmod 600 "$STATE_FILE"
    log "Saved state to $STATE_FILE"
}

# Validate Telegram configuration
validate_telegram() {
    if [ -n "$TG_BOT_TOKEN" ] && [ -n "$TG_CHAT_IDS" ]; then
        ping -c 1 api.telegram.org >/dev/null 2>&1 || log "WARNING: Cannot reach Telegram server"
        local response=$(curl -s -m 5 "${TG_API}${TG_BOT_TOKEN}/getMe")
        if echo "$response" | grep -q '"ok":true'; then
            log "Telegram Bot validation succeeded"
            return 0
        else
            log "ERROR: Telegram validation failed: $response"
            return 1
        fi
    else
        log "ERROR: Telegram configuration incomplete"
        return 1
    fi
}

# Validate DingTalk Webhook
validate_dingtalk() {
    local webhook="$1"
    ping -c 1 oapi.dingtalk.com >/dev/null 2>&1 || log "WARNING: Cannot reach DingTalk server"
    local response=$(curl -s -m 5 -X POST "$webhook" \
        -H "Content-Type: application/json" \
        -d '{"msgtype": "text", "text": {"content": "ÊµãËØïÊ∂àÊÅØ"}}')
    local curl_exit=$?
    if [ $curl_exit -eq 0 ] && echo "$response" | grep -q '"errcode":0'; then
        log "DingTalk Webhook validation succeeded: $(echo "$webhook" | cut -c1-10)****"
        return 0
    else
        log "ERROR: DingTalk Webhook validation failed: $(echo "$webhook" | cut -c1-10)****, curl exit: $curl_exit, response: $response"
        return 1
    fi
}

# Send Telegram notification
send_tg_notification() {
    local message="$1"
    if [ -z "$TG_BOT_TOKEN" ] || [ -z "$TG_CHAT_IDS" ]; then
        log "ERROR: Telegram configuration incomplete"
        return 1
    fi

    IFS=',' read -ra IDS << "$TG_CHAT_IDS"
    local success=0
    for id in "${IDS[@]}"; do
        response=$(curl -s -m 5 -w "\nHTTP_CODE:%{http_code}" -X POST "${TG_API}${TG_BOT_TOKEN}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"$id\", \"text\": \"$message\", \"parse_mode\": \"Markdown\"}")
        http_code=$(echo "$response" | grep "HTTP_CODE" | cut -d':' -f2)
        response_body=$(echo "$response" | grep -v "HTTP_CODE")
        if echo "$response_body" | grep -q '"ok":true'; then
            log "Telegram notification sent to $id: $message"
            success=1
        else
            log "ERROR: Failed to send Telegram message to $id (HTTP $http_code): $response_body"
        fi
    done
    [ $success -eq 1 ] && return 0 || return 1
}

# Send DingTalk Webhook notification
send_dingtalk_notification() {
    local message="$1"
    if [ -z "$DINGTALK_WEBHOOK" ]; then
        log "ERROR: DingTalk Webhook not configured"
        return 1
    fi
    local response=$(curl -s -m 5 -X POST "$DINGTALK_WEBHOOK" \
        -H "Content-Type: application/json" \
        -d "{\"msgtype\": \"text\", \"text\": {\"content\": \"$message\"}}")
    if [ $? -eq 0 ] && echo "$response" | grep -q '"errcode":0'; then
        log "DingTalk notification sent: $message"
        return 0
    else
        log "ERROR: Failed to send DingTalk notification: $response"
        return 1
    fi
}

# Unified notification sending
send_notification() {
    local message="$1"
    if [ "$NOTIFY_TYPE" = "telegram" ]; then
        send_tg_notification "$message"
    else
        send_dingtalk_notification "$message"
    fi
}

# Ping host function
ping_host() {
    local HOST="$1"
    local REMARK="$2"
    local CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S")
    local PING_RESULT
    local STATUS=""
    local LOG_ENTRY=""

    PING_RESULT=$(ping -c 1 -W 2 "$HOST" 2>&1)
    local PING_EXIT=$?

    log "Ping attempt for $HOST ($REMARK): $PING_RESULT"

    if [ $PING_EXIT -eq 0 ] && echo "$PING_RESULT" | grep -q "1 packets transmitted, 1 packets received"; then
        local RESPONSE_TIME=$(echo "$PING_RESULT" | grep "time=" | awk -F"time=" '{print $2}' | awk '{print $1}')
        STATUS="Ping successful, response time: ${RESPONSE_TIME}ms"
        if [ "${HOST_STATUS[$HOST]}" -eq 1 ]; then
            HOST_STATUS["$HOST"]=0
            FAILURE_COUNTS["$HOST"]=0
            local message="‚úÖ *‰∏ªÊú∫‰∏äÁ∫øÈÄöÁü•*\n\nüìç *‰∏ªÊú∫*: $HOST\nüìù *Â§áÊ≥®*: $REMARK\nüïí *Êó∂Èó¥*: $CURRENT_TIME"
            send_notification "$message" && LOG_ENTRY="$CURRENT_TIME - $HOST ($REMARK) - $STATUS - ‰∏äÁ∫øÈÄöÁü•Â∑≤ÂèëÈÄÅ" || LOG_ENTRY="$CURRENT_TIME - $HOST ($REMARK) - $STATUS - ‰∏äÁ∫øÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•"
            log "Reset $HOST: Failure count=${FAILURE_COUNTS[$HOST]}, Status=${HOST_STATUS[$HOST]}"
        else
            LOG_ENTRY="$CURRENT_TIME - $HOST ($REMARK) - $STATUS"
            FAILURE_COUNTS["$HOST"]=0
            log "Reset $HOST: Failure count=${FAILURE_COUNTS[$HOST]}, Status=${HOST_STATUS[$HOST]}"
        fi
    else
        STATUS="Ping failed: $PING_RESULT"
        FAILURE_COUNTS["$HOST"]=$((FAILURE_COUNTS[$HOST] + 1))
        LOG_ENTRY="$CURRENT_TIME - $HOST ($REMARK) - $STATUS"
        log "Failure count for $HOST: ${FAILURE_COUNTS[$HOST]}, Threshold: $OFFLINE_THRESHOLD, Status: ${HOST_STATUS[$HOST]}"
        if [ "${FAILURE_COUNTS[$HOST]}" -ge "$OFFLINE_THRESHOLD" ] && [ "${HOST_STATUS[$HOST]}" -eq 0 ]; then
            HOST_STATUS["$HOST"]=1
            local message="üõë *‰∏ªÊú∫Á¶ªÁ∫øÈÄöÁü•*\n\nüìç *‰∏ªÊú∫*: $HOST\nüìù *Â§áÊ≥®*: $REMARK\nüïí *Êó∂Èó¥*: $CURRENT_TIME\n‚ö†Ô∏è *ËøûÁª≠Â§±Ë¥•*: ${FAILURE_COUNTS[$HOST]}Ê¨°"
            send_notification "$message" && LOG_ENTRY="$LOG_ENTRY - Á¶ªÁ∫øÈÄöÁü•Â∑≤ÂèëÈÄÅ" || LOG_ENTRY="$LOG_ENTRY - Á¶ªÁ∫øÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•"
        fi
    fi

    echo "$LOG_ENTRY"
    echo "$LOG_ENTRY" >> "$LOG_FILE"
}

# Monitor function (called by cron)
monitor() {
    exec 200>"$LOCK_FILE"
    if ! flock -n 200; then
        log "Another monitor instance is running, exiting"
        return 1
    fi

    load_config
    load_state

    if [ "$NOTIFY_TYPE" = "telegram" ]; then
        validate_telegram || return 1
    elif [ "$NOTIFY_TYPE" = "dingtalk" ]; then
        validate_dingtalk "$DINGTALK_WEBHOOK" || return 1
    fi

    IFS=',' read -ra HOSTS << "$HOSTS_LIST"
    IFS=',' read -ra REMARKS << "$REMARKS_LIST"

    for i in "${!HOSTS[@]}"; do
        HOST="${HOSTS[$i]}"
        if [ -z "${FAILURE_COUNTS[$HOST]}" ]; then
            FAILURE_COUNTS["$HOST"]=0
            HOST_STATUS["$HOST"]=0
            log "Initialized $HOST: Failure count=${FAILURE_COUNTS[$HOST]}, Status=${HOST_STATUS[$HOST]}"
        fi
    done

    local attempts=$((60 / INTERVAL))
    [ $attempts -lt 1 ] && attempts=1

    for attempt in $(seq 1 $attempts); do
        log "Monitor attempt $attempt/$attempts"
        for i in "${!HOSTS[@]}"; do
            ping_host "${HOSTS[$i]}" "${REMARKS[$i]}"
        done
        save_state
        [ $attempt -lt $attempts ] && sleep "$INTERVAL"
    done

    flock -u 200
}

# Check dependencies
check_dependencies() {
    for cmd in curl ping flock; do
        if ! command -v $cmd >/dev/null 2>&1; then
            echo -e "${RED}Áº∫Â∞ë‰æùË≥¥: $cmd${NC}"
            echo -e "${YELLOW}Ê≠£Âú®ÂòóË©¶ÂÆâË£ù $cmd...${NC}"
            if [ -f /etc/openwrt_release ]; then
                opkg update >/dev/null 2>&1
                opkg install curl iputils-ping util-linux >/dev/null 2>&1
            else
                echo -e "${RED}Êú™Ê™¢Ê∏¨Âà∞ OpenWrt/iStoreOSÔºåË´ãÊâãÂãïÂÆâË£ù $cmd${NC}"
                log "ERROR: No supported package manager for $cmd"
                exit 1
            fi
            if ! command -v $cmd >/dev/null 2>&1; then
                echo -e "${RED}ÂÆâË£ù $cmd Â§±ÊïóÔºåË´ãÊâãÂãïÂÆâË£ù${NC}"
                log "ERROR: Failed to install dependency: $cmd"
                exit 1
            fi
        fi
    done
    log "Dependencies checked: curl ping flock"
}

# Validate IP or domain
validate_host() {
    local host="$1"
    # Validate IPv4
    if echo "$host" | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' >/dev/null; then
        return 0
    # Validate domain
    elif echo "$host" | grep -E '^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z]{2,})+$' >/dev/null; then
        return 0
    else
        return 1
    fi
}

# Print menu header
print_menu_header() {
    clear
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}‚ïë     ${YELLOW}PingX Áõ£ÊéßÁ≥ªÁµ± (v1.1.0)     ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïë     ${YELLOW}‰ΩúËÄÖ: TheX                  ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïë     ${YELLOW}GitHub: https://github.com/MEILOI/ping-x ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    if [ -f /etc/openwrt_release ]; then
        echo -e "${YELLOW}iStoreOS/OpenWrt ÊèêÁ§∫ÔºöË´ãÁ¢∫‰øù WAN ÈÄ£Á∑öÂíå DNS Ê≠£Â∏∏${NC}"
        echo -e "${YELLOW}Â¶ÇÈÅáÂïèÈ°åÔºåÊ™¢Êü•Êó•Ë™åÔºö/var/log/pingX_monitor.log${NC}"
    fi
    echo ""
}

# Show current configuration
show_config() {
    echo -e "${CYAN}Áï∂ÂâçÈÖçÁΩÆ:${NC}"
    if [ -f "$CONFIG_FILE" ]; then
        . "$CONFIG_FILE"
        echo -e "${CYAN}ÈÄöÁü•ÊñπÂºè:${NC} ${NOTIFY_TYPE:-Êú™Ë®≠ÁΩÆ}"
        if [ "$NOTIFY_TYPE" = "telegram" ]; then
            if [ -n "$TG_BOT_TOKEN" ]; then
                token_prefix=$(echo $TG_BOT_TOKEN | cut -d':' -f1)
                token_masked="$token_prefix:****"
                echo -e "${CYAN}Telegram Bot Token:${NC} $token_masked"
            else
                echo -e "${CYAN}Telegram Bot Token:${NC} ${RED}Êú™Ë®≠ÁΩÆ${NC}"
            fi
            echo -e "${CYAN}Telegram Chat IDs:${NC} ${TG_CHAT_IDS:-Êú™Ë®≠ÁΩÆ}"
        else
            if [ -n "$DINGTALK_WEBHOOK" ]; then
                webhook_masked=$(echo "$DINGTALK_WEBHOOK" | cut -c1-10)****
                echo -e "${CYAN}ÈáòÈáò Webhook:${NC} $webhook_masked"
            else
                echo -e "${CYAN}ÈáòÈáò Webhook:${NC} ${RED}Êú™Ë®≠ÁΩÆ${NC}"
            fi
        fi
        echo -e "${CYAN}Áõ£ÊéßÈñìÈöî:${NC} ${INTERVAL:-60}Áßí"
        echo -e "${CYAN}Èõ¢Á∑öÈñæÂÄº:${NC} ${OFFLINE_THRESHOLD:-3}Ê¨°"
        echo -e "${CYAN}‰∏ªÊ©üÂàóË°®:${NC}"
        if [ -n "$HOSTS_LIST" ]; then
            IFS=',' read -ra HOSTS << "$HOSTS_LIST"
            IFS=',' read -ra REMARKS << "$REMARKS_LIST"
            for i in "${!HOSTS[@]}"; do
                echo -e "  $((i+1)). ${HOSTS[$i]} (${REMARKS[$i]})"
            done
        else
            echo -e "${RED}Êú™ÈÖçÁΩÆ‰ªª‰Ωï‰∏ªÊ©ü${NC}"
        fi
    else
        echo -e "${RED}Êú™ÊâæÂà∞ÈÖçÁΩÆÊñá‰ª∂ÔºåË´ãÂÖàÂÆâË£ùËÖ≥Êú¨${NC}"
    fi
    echo ""
}

# View log function
view_log() {
    print_menu_header
    echo -e "${CYAN}[Êü•ÁúãÊó•Ë™å]${NC} È°ØÁ§∫ /var/log/pingX_monitor.log ÁöÑÊúÄÊñ∞ 20 Ë°å:\n"
    if [ -f "$LOG_FILE" ]; then
        tail -n 20 "$LOG_FILE"
    else
        echo -e "${RED}Êó•Ë™åÊñá‰ª∂‰∏çÂ≠òÂú®${NC}"
    fi
    echo ""
    read -p "Êåâ Enter ÈçµÁπºÁ∫å..."
}

# Install script
install_script() {
    print_menu_header
    echo -e "${CYAN}[ÂÆâË£ù] ${GREEN}ÈñãÂßãÂÆâË£ù PingX Áõ£ÊéßÁ≥ªÁµ±...${NC}"
    echo ""

    check_dependencies

    echo -e "${CYAN}[1/5]${NC} ÈÅ∏ÊìáÈÄöÁü•ÊñπÂºè:"
    echo -e "${CYAN}1.${NC} Telegram"
    echo -e "${CYAN}2.${NC} ÈáòÈáò"
    read -p "Ë´ãÈÅ∏Êìá [1-2]: " notify_choice
    case $notify_choice in
        1)
            NOTIFY_TYPE="telegram"
            ;;
        2)
            NOTIFY_TYPE="dingtalk"
            ;;
        *)
            echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåÈªòË™ç‰ΩøÁî® Telegram${NC}"
            NOTIFY_TYPE="telegram"
            ;;
    esac

    if [ "$NOTIFY_TYPE" = "telegram" ]; then
        echo -e "\n${CYAN}[2/5]${NC} Ëº∏ÂÖ• Telegram Bot Token:"
        read -p "Token (Ê†ºÂºèÂ¶Ç123456789:ABCDEF...): " TG_BOT_TOKEN
        echo -e "\n${CYAN}[3/5]${NC} Ëº∏ÂÖ• Telegram Chat ID (ÊîØÊåÅÂ§öÂÄãÔºåÈÄóËôüÂàÜÈöî):"
        read -p "Chat ID(s): " TG_CHAT_IDS
        if [ -n "$TG_BOT_TOKEN" ] && [ -n "$TG_CHAT_IDS" ]; then
            validate_telegram && echo -e "${GREEN}Token ÊúâÊïà${NC}" || echo -e "${RED}Token ÁÑ°ÊïàÔºåË´ãÊ™¢Êü•Êó•Ë™å${NC}"
        fi
        DINGTALK_WEBHOOK=""
    else
        echo -e "\n${CYAN}[2/5]${NC} Ëº∏ÂÖ•ÈáòÈáò Webhook URL:"
        read -p "Webhook: " DINGTALK_WEBHOOK
        if [ -n "$DINGTALK_WEBHOOK" ]; then
            validate_dingtalk "$DINGTALK_WEBHOOK"
        fi
        TG_BOT_TOKEN=""
        TG_CHAT_IDS=""
    fi

    echo -e "\n${CYAN}[3/5]${NC} Ëº∏ÂÖ•Ë¶ÅÁõ£ÊéßÁöÑ IP ÊàñÂüüÂêç (ÊØèÊ¨°Ëº∏ÂÖ•‰∏ÄÂÄãÔºåÁ©∫Ë°åÁµêÊùü):"
    echo -e "${YELLOW}Á§∫‰æã: 192.168.1.1 Êàñ example.com${NC}"
    HOSTS_LIST=""
    REMARKS_LIST=""
    while true; do
        read -p "IP ÊàñÂüüÂêç (Á©∫Ë°åÁµêÊùü): " host
        if [ -z "$host" ]; then
            if [ -z "$HOSTS_LIST" ]; then
                echo -e "${YELLOW}Ë≠¶Âëä: Êú™Ê∑ªÂä†‰ªª‰Ωï‰∏ªÊ©ü${NC}"
            fi
            break
        fi
        if ! validate_host "$host"; then
            echo -e "${RED}ÈåØË™§: $host ‰∏çÊòØÊúâÊïàÁöÑ IP ÊàñÂüüÂêç${NC}"
            continue
        fi
        read -p "Ë´ãËº∏ÂÖ• $host ÁöÑÂÇôË®ª: " remark
        if [ -z "$remark" ]; then
            echo -e "${RED}ÈåØË™§: ÂÇôË®ª‰∏çËÉΩÁÇ∫Á©∫${NC}"
            continue
        fi
        [ -n "$HOSTS_LIST" ] && HOSTS_LIST="$HOSTS_LIST,"
        [ -n "$REMARKS_LIST" ] && REMARKS_LIST="$REMARKS_LIST,"
        HOSTS_LIST="$HOSTS_LIST$host"
        REMARKS_LIST="$REMARKS_LIST$remark"
        echo -e "${GREEN}Â∑≤Ê∑ªÂä†: $host ($remark)${NC}"
    done

    echo -e "\n${CYAN}[4/5]${NC} Ëº∏ÂÖ•Áõ£ÊéßÈñìÈöî (ÁßíÔºåÈªòË™ç60):"
    read -p "ÈñìÈöî: " INTERVAL
    INTERVAL=${INTERVAL:-60}
    echo -e "\n${CYAN}[5/5]${NC} Ëº∏ÂÖ•Èõ¢Á∑öÈñæÂÄº (ÈÄ£Á∫åÂ§±ÊïóÊ¨°Êï∏ÔºåÈªòË™ç3):"
    read -p "ÈñæÂÄº: " OFFLINE_THRESHOLD
    OFFLINE_THRESHOLD=${OFFLINE_THRESHOLD:-3}

    save_config

    mkdir -p /usr/local/bin
    cp "$0" "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"

    if ! grep -q "pingX_monitor.sh monitor" "$CRONTAB_PATH"; then
        echo "$CRON_JOB" >> "$CRONTAB_PATH"
        if [ -f /etc/openwrt_release ]; then
            /etc/init.d/cron restart >/dev/null 2>&1
        fi
    fi

    rm -f "$STATE_FILE"
    log "Cleared state file during installation"

    echo -e "\n${GREEN}‚úÖ ÂÆâË£ùÂÆåÊàê!${NC}"
    echo -e "${YELLOW}ÊèêÁ§∫: ÂèØ‰ª•ÂæûËèúÂñÆÈÅ∏Êìá'Ê∏¨Ë©¶ÈÄöÁü•'È©óË≠âÈÖçÁΩÆ${NC}"
    log "Installation completed"
    sleep 2
}

# Uninstall script
uninstall_script() {
    print_menu_header
    echo -e "${CYAN}[Âç∏Ëºâ] ${YELLOW}Ê≠£Âú®Âç∏Ëºâ PingX Áõ£ÊéßÁ≥ªÁµ±...${NC}\n"

    sed -i '/pingX_monitor.sh monitor/d' "$CRONTAB_PATH"
    if [ -f /etc/openwrt_release ]; then
        /etc/init.d/cron restart >/dev/null 2>&1
    fi
    rm -f "$SCRIPT_PATH" "$CONFIG_FILE" "$STATE_FILE" "$LOCK_FILE"
    rm -f "$LOG_FILE" "${LOG_FILE}".*
    rmdir /var/log 2>/dev/null || true

    echo -e "\n${GREEN}‚úÖ Âç∏ËºâÂÆåÊàê!${NC}"
    echo -e "${YELLOW}ÊâÄÊúâÈÖçÁΩÆÊñá‰ª∂ÂíåËÖ≥Êú¨Â∑≤Âà™Èô§${NC}"
    log "Uninstallation completed"
    sleep 2
    exit 0
}

# Test notifications
test_notifications() {
    load_config
    while true; do
        print_menu_header
        echo -e "${CYAN}[Ê∏¨Ë©¶ÈÄöÁü•]${NC} Ë´ãÈÅ∏ÊìáË¶ÅÊ∏¨Ë©¶ÁöÑÈÄöÁü•È°ûÂûã:\n"
        echo -e "${CYAN}1.${NC} Ê∏¨Ë©¶Èõ¢Á∑öÈÄöÁü•"
        echo -e "${CYAN}2.${NC} Ê∏¨Ë©¶‰∏äÁ∑öÈÄöÁü•"
        echo -e "${CYAN}0.${NC} ËøîÂõû‰∏ªËèúÂñÆ"
        echo ""
        read -p "Ë´ãÈÅ∏Êìá [0-2]: " choice

        case $choice in
            1)
                echo -e "\n${YELLOW}Ê≠£Âú®ÁôºÈÄÅÈõ¢Á∑öÈÄöÁü•...${NC}"
                local test_host="192.168.1.100"
                local test_remark="Ê∏¨Ë©¶‰∏ªÊ©ü"
                local time=$(date '+%Y-%m-%d %H:%M:%S')
                local message="üõë *‰∏ªÊ©üÈõ¢Á∑öÈÄöÁü•*\n\nüìç *‰∏ªÊ©ü*: $test_host\nüìù *ÂÇôË®ª*: $test_remark\nüïí *ÊôÇÈñì*: $time\n‚ö†Ô∏è *ÈÄ£Á∫åÂ§±Êïó*: ${OFFLINE_THRESHOLD}Ê¨°"
                send_notification "$message" && echo -e "\n${GREEN}ÈÄöÁü•Â∑≤ÁôºÈÄÅÔºåË´ãÊ™¢Êü•ÈÄöÁü•Ê∏†ÈÅì${NC}" || echo -e "\n${RED}ÈÄöÁü•ÁôºÈÄÅÂ§±ÊïóÔºåË´ãÊ™¢Êü•Êó•Ë™å${NC}"
                read -p "Êåâ Enter ÈçµÁπºÁ∫å..."
                ;;
            2)
                echo -e "\n${YELLOW}Ê≠£Âú®ÁôºÈÄÅ‰∏äÁ∑öÈÄöÁü•...${NC}"
                local test_host="192.168.1.100"
                local test_remark="Ê∏¨Ë©¶‰∏ªÊ©ü"
                local time=$(date '+%Y-%m-%d %H:%M:%S')
                local message="‚úÖ *‰∏ªÊ©ü‰∏äÁ∑öÈÄöÁü•*\n\nüìç *‰∏ªÊ©ü*: $test_host\nüìù *ÂÇôË®ª*: $test_remark\nüïí *ÊôÇÈñì*: $time"
                send_notification "$message" && echo -e "\n${GREEN}ÈÄöÁü•Â∑≤ÁôºÈÄÅÔºåË´ãÊ™¢Êü•ÈÄöÁü•Ê∏†ÈÅì${NC}" || echo -e "\n${RED}ÈÄöÁü•ÁôºÈÄÅÂ§±ÊïóÔºåË´ãÊ™¢Êü•Êó•Ë™å${NC}"
                read -p "Êåâ Enter ÈçµÁπºÁ∫å..."
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåË´ãÈáçË©¶${NC}"
                sleep 1
                ;;
        esac
    done
}

# Modify configuration
modify_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}ÈåØË™§: ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåË´ãÂÖàÂÆâË£ùËÖ≥Êú¨${NC}"
        sleep 2
        return
    fi

    load_config
    while true; do
        print_menu_header
        echo -e "${CYAN}[ÈÖçÁΩÆË®≠ÁΩÆ]${NC}\n"
        show_config

        echo -e "Ë´ãÈÅ∏ÊìáË¶Å‰øÆÊîπÁöÑÈÖçÁΩÆÈ†Ö:"
        echo -e "${CYAN}1.${NC} ÂàóÂá∫Áï∂ÂâçÈÖçÁΩÆ"
        echo -e "${CYAN}2.${NC} ‰øÆÊîπÈÄöÁü•ÊñπÂºè"
        echo -e "${CYAN}3.${NC} ‰øÆÊîπ Telegram ÈÖçÁΩÆ"
        echo -e "${CYAN}4.${NC} ‰øÆÊîπÈáòÈáò Webhook"
        echo -e "${CYAN}5.${NC} ‰øÆÊîπ‰∏ªÊ©üÂàóË°®ÂíåÂÇôË®ª"
        echo -e "${CYAN}6.${NC} ‰øÆÊîπÁõ£ÊéßÈñìÈöî"
        echo -e "${CYAN}7.${NC} ‰øÆÊîπÈõ¢Á∑öÈñæÂÄº"
        echo -e "${CYAN}0.${NC} ËøîÂõû‰∏ªËèúÂñÆ"
        echo ""
        read -p "Ë´ãÈÅ∏Êìá [0-7]: " choice

        case $choice in
            1)
                echo -e "\n${CYAN}Áï∂ÂâçÈÖçÁΩÆ:${NC}"
                show_config
                read -p "Êåâ Enter ÈçµÁπºÁ∫å..."
                ;;
            2)
                echo -e "\n${CYAN}ÈÅ∏ÊìáÊñ∞ÁöÑÈÄöÁü•ÊñπÂºè:${NC}"
                echo -e "${CYAN}1.${NC} Telegram"
                echo -e "${CYAN}2.${NC} ÈáòÈáò"
                read -p "Ë´ãÈÅ∏Êìá [1-2]: " notify_choice
                case $notify_choice in
                    1)
                        NOTIFY_TYPE="telegram"
                        sed -i "s/NOTIFY_TYPE=.*/NOTIFY_TYPE=\"telegram\"/" "$CONFIG_FILE"
                        echo -e "${GREEN}ÈÄöÁü•ÊñπÂºèÂ∑≤Ë®≠ÁΩÆÁÇ∫ Telegram${NC}"
                        log "Notification type set to telegram"
                        ;;
                    2)
                        NOTIFY_TYPE="dingtalk"
                        sed -i "s/NOTIFY_TYPE=.*/NOTIFY_TYPE=\"dingtalk\"/" "$CONFIG_FILE"
                        echo -e "${GREEN}ÈÄöÁü•ÊñπÂºèÂ∑≤Ë®≠ÁΩÆÁÇ∫ÈáòÈáò${NC}"
                        log "Notification type set to dingtalk"
                        ;;
                    *)
                        echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåÈÄöÁü•ÊñπÂºèÊú™Êõ¥Êîπ${NC}"
                        ;;
                esac
                ;;
            3)
                if [ "$NOTIFY_TYPE" != "telegram" ]; then
                    echo -e "${RED}Áï∂ÂâçÈÄöÁü•ÊñπÂºè‰∏çÊòØ TelegramÔºåË´ãÂÖàÂàáÊèõ${NC}"
                    sleep 2
                    continue
                fi
                echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑ Telegram Bot Token:${NC}"
                read -p "Token: " new_token
                if [ -n "$new_token" ]; then
                    sed -i "s/TG_BOT_TOKEN=.*/TG_BOT_TOKEN=\"$new_token\"/" "$CONFIG_FILE"
                    TG_BOT_TOKEN="$new_token"
                    validate_telegram && echo -e "${GREEN}Telegram Token Â∑≤Êõ¥Êñ∞‰∏îÊúâÊïà${NC}" || echo -e "${RED}Telegram Token ÁÑ°Êïà${NC}"
                    log "Telegram Bot Token updated"
                fi
                echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑ Telegram Chat ID(s) (Â§öÂÄã ID Áî®ÈÄóËôüÂàÜÈöî):${NC}"
                read -p "Chat ID(s): " new_ids
                if [ -n "$new_ids" ]; then
                    sed -i "s/TG_CHAT_IDS=.*/TG_CHAT_IDS=\"$new_ids\"/" "$CONFIG_FILE"
                    echo -e "${GREEN}Telegram Chat ID Â∑≤Êõ¥Êñ∞${NC}"
                    log "Telegram Chat IDs updated: $new_ids"
                fi
                ;;
            4)
                if [ "$NOTIFY_TYPE" != "dingtalk" ]; then
                    echo -e "${RED}Áï∂ÂâçÈÄöÁü•ÊñπÂºè‰∏çÊòØÈáòÈáòÔºåË´ãÂÖàÂàáÊèõ${NC}"
                    sleep 2
                    continue
                fi
                echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÈáòÈáò Webhook URL:${NC}"
                read -p "Webhook: " new_webhook
                if [ -n "$new_webhook" ]; then
                    validate_dingtalk "$new_webhook"
                    sed -i "s|DINGTALK_WEBHOOK=.*|DINGTALK_WEBHOOK=\"$new_webhook\"|" "$CONFIG_FILE"
                    echo -e "${GREEN}ÈáòÈáò Webhook Â∑≤Êõ¥Êñ∞${NC}"
                    log "DingTalk Webhook updated"
                fi
                ;;
            5)
                while true; do
                    echo -e "\n${CYAN}Áï∂Ââç‰∏ªÊ©üÂàóË°®:${NC}"
                    if [ -n "$HOSTS_LIST" ]; then
                        IFS=',' read -ra HOSTS << "$HOSTS_LIST"
                        IFS=',' read -ra REMARKS << "$REMARKS_LIST"
                        for i in "${!HOSTS[@]}"; do
                            echo -e "  $((i+1)). ${HOSTS[$i]} (${REMARKS[$i]})"
                        done
                    else
                        echo -e "${RED}Êú™ÈÖçÁΩÆ‰ªª‰Ωï‰∏ªÊ©ü${NC}"
                    fi
                    echo ""
                    echo -e "${CYAN}‰∏ªÊ©üÁÆ°ÁêÜÊìç‰Ωú:${NC}"
                    echo -e "${CYAN}1.${NC} Ê∑ªÂä†‰∏ªÊ©ü"
                    echo -e "${CYAN}2.${NC} Âà™Èô§‰∏ªÊ©ü"
                    echo -e "${CYAN}0.${NC} ËøîÂõû"
                    read -p "Ë´ãÈÅ∏Êìá [0-2]: " host_choice
                    case $host_choice in
                        1)
                            echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑ IP ÊàñÂüüÂêç (ÊØèÊ¨°Ëº∏ÂÖ•‰∏ÄÂÄãÔºåÁ©∫Ë°åÁµêÊùü):${NC}"
                            echo -e "${YELLOW}Á§∫‰æã: 192.168.1.1 Êàñ example.com${NC}"
                            while true; do
                                read -p "IP ÊàñÂüüÂêç (Á©∫Ë°åÁµêÊùü): " host
                                if [ -z "$host" ]; then
                                    break
                                fi
                                if ! validate_host "$host"; then
                                    echo -e "${RED}ÈåØË™§: $host ‰∏çÊòØÊúâÊïàÁöÑ IP ÊàñÂüüÂêç${NC}"
                                    continue
                                fi
                                read -p "Ë´ãËº∏ÂÖ• $host ÁöÑÂÇôË®ª: " remark
                                if [ -z "$remark" ]; then
                                    echo -e "${RED}ÈåØË™§: ÂÇôË®ª‰∏çËÉΩÁÇ∫Á©∫${NC}"
                                    continue
                                fi
                                [ -n "$HOSTS_LIST" ] && HOSTS_LIST="$HOSTS_LIST,"
                                [ -n "$REMARKS_LIST" ] && REMARKS_LIST="$REMARKS_LIST,"
                                HOSTS_LIST="$HOSTS_LIST$host"
                                REMARKS_LIST="$REMARKS_LIST$remark"
                                echo -e "${GREEN}Â∑≤Ê∑ªÂä†: $host ($remark)${NC}"
                            done
                            ;;
                        2)
                            if [ -z "$HOSTS_LIST" ]; then
                                echo -e "${RED}ÈåØË™§: ‰∏ªÊ©üÂàóË°®ÁÇ∫Á©∫ÔºåÁÑ°Ê≥ïÂà™Èô§${NC}"
                                sleep 2
                                continue
                            fi
                            echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Ë¶ÅÂà™Èô§ÁöÑ‰∏ªÊ©üÁ∑®Ëôü:${NC}"
                            IFS=',' read -ra HOSTS << "$HOSTS_LIST"
                            IFS=',' read -ra REMARKS << "$REMARKS_LIST"
                            read -p "Á∑®Ëôü (1-${#HOSTS[@]}): " delete_index
                            if echo "$delete_index" | grep -q -v '^[0-9]\+$' || [ "$delete_index" -lt 1 ] || [ "$delete_index" -gt "${#HOSTS[@]}" ]; then
                                echo -e "${RED}ÈåØË™§: ÁÑ°ÊïàÁöÑÁ∑®ËôüÔºåË´ãËº∏ÂÖ• 1 Âà∞ ${#HOSTS[@]}${NC}"
                                sleep 2
                                continue
                            fi
                            delete_idx=$((delete_index-1))
                            echo -e "${YELLOW}Â∞áÂà™Èô§: ${HOSTS[$delete_idx]} (${REMARKS[$delete_idx]})${NC}"
                            read -p "Á¢∫Ë™çÂà™Èô§? [y/N]: " confirm
                            if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
                                echo -e "${YELLOW}ÂèñÊ∂àÂà™Èô§${NC}"
                                sleep 2
                                continue
                            fi
                            new_hosts=""
                            new_remarks=""
                            for i in "${!HOSTS[@]}"; do
                                if [ "$i" -ne "$delete_idx" ]; then
                                    [ -n "$new_hosts" ] && new_hosts="$new_hosts,"
                                    [ -n "$new_remarks" ] && new_remarks="$new_remarks,"
                                    new_hosts="$new_hosts${HOSTS[$i]}"
                                    new_remarks="$new_remarks${REMARKS[$i]}"
                                fi
                            done
                            HOSTS_LIST="$new_hosts"
                            REMARKS_LIST="$new_remarks"
                            echo -e "${GREEN}‰∏ªÊ©üÂ∑≤Âà™Èô§${NC}"
                            log "Deleted host: ${HOSTS[$delete_idx]} (${REMARKS[$delete_idx]})"
                            ;;
                        0)
                            sed -i "s/HOSTS_LIST=.*/HOSTS_LIST=\"$HOSTS_LIST\"/" "$CONFIG_FILE"
                            sed -i "s/REMARKS_LIST=.*/REMARKS_LIST=\"$REMARKS_LIST\"/" "$CONFIG_FILE"
                            echo -e "${GREEN}‰∏ªÊ©üÂàóË°®ÂíåÂÇôË®ªÂ∑≤Êõ¥Êñ∞${NC}"
                            log "Host list and remarks updated"
                            break
                            ;;
                        *)
                            echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåË´ãÈáçË©¶${NC}"
                            sleep 1
                            ;;
                    esac
                done
                ;;
            6)
                echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÁõ£ÊéßÈñìÈöî (Áßí):${NC}"
                read -p "ÈñìÈöî (ÈªòË™ç60): " new_interval
                new_interval=${new_interval:-60}
                sed -i "s/INTERVAL=.*/INTERVAL=\"$new_interval\"/" "$CONFIG_FILE"
                echo -e "${GREEN}Áõ£ÊéßÈñìÈöîÂ∑≤Êõ¥Êñ∞ÁÇ∫ ${new_interval}Áßí${NC}"
                log "Interval updated to $new_interval seconds"
                ;;
            7)
                echo -e "\n${YELLOW}Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÈõ¢Á∑öÈñæÂÄº (ÈÄ£Á∫åÂ§±ÊïóÊ¨°Êï∏):${NC}"
                read -p "ÈñæÂÄº (ÈªòË™ç3): " new_threshold
                new_threshold=${new_threshold:-3}
                sed -i "s/OFFLINE_THRESHOLD=.*/OFFLINE_THRESHOLD=\"$new_threshold\"/" "$CONFIG_FILE"
                echo -e "${GREEN}Èõ¢Á∑öÈñæÂÄºÂ∑≤Êõ¥Êñ∞ÁÇ∫ ${new_threshold}Ê¨°${NC}"
                log "Offline threshold updated to $new_threshold"
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåË´ãÈáçË©¶${NC}"
                sleep 1
                ;;
        esac
        sleep 1
        load_config
    done
}

# Show usage help
show_usage() {
    echo "Áî®Ê≥ï: $0 [ÂëΩ‰ª§]"
    echo ""
    echo "ÂëΩ‰ª§:"
    echo "  install   ÂÆâË£ùËÖ≥Êú¨"
    echo "  uninstall Âç∏ËºâËÖ≥Êú¨"
    echo "  monitor   ÈÅãË°åÁõ£Êéß (Áî±cronË™øÁî®)"
    echo "  menu      È°ØÁ§∫‰∫§‰∫íÂºèËèúÂñÆ (ÈªòË™ç)"
    echo ""
}

# Main menu
show_menu() {
    while true; do
        print_menu_header
        if [ -f "$CONFIG_FILE" ]; then
            echo -e "${GREEN}‚óè Áõ£ÊéßÁ≥ªÁµ±Â∑≤ÂÆâË£ù${NC}\n"
            show_config
        else
            echo -e "${RED}‚óè Áõ£ÊéßÁ≥ªÁµ±Êú™ÂÆâË£ù${NC}\n"
        fi

        echo -e "Ë´ãÈÅ∏ÊìáÊìç‰Ωú:"
        echo -e "${CYAN}1.${NC} ÂÆâË£ù/ÈáçÊñ∞ÂÆâË£ù"
        echo -e "${CYAN}2.${NC} ÈÖçÁΩÆË®≠ÁΩÆ"
        echo -e "${CYAN}3.${NC} Ê∏¨Ë©¶ÈÄöÁü•"
        echo -e "${CYAN}4.${NC} Âç∏Ëºâ"
        echo -e "${CYAN}5.${NC} Êü•ÁúãÊó•Ë™å"
        echo -e "${CYAN}0.${NC} ÈÄÄÂá∫"
        echo ""
        read -p "Ë´ãÈÅ∏Êìá [0-5]: " choice

        case $choice in
            1)
                install_script
                ;;
            2)
                modify_config
                ;;
            3)
                test_notifications
                ;;
            4)
                echo -e "\n${YELLOW}Ë≠¶Âëä: Ê≠§Êìç‰ΩúÂ∞áÂà™Èô§ÊâÄÊúâÈÖçÁΩÆÂíåËÖ≥Êú¨!${NC}"
                read -p "Á¢∫Ë™çÂç∏Ëºâ? [y/N]: " confirm
                if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                    uninstall_script
                fi
                ;;
            5)
                view_log
                ;;
            0)
                echo -e "\n${GREEN}ÊÑüË¨ù‰ΩøÁî® PingX Áõ£ÊéßÁ≥ªÁµ±!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}ÁÑ°ÊïàÈÅ∏ÊìáÔºåË´ãÈáçË©¶${NC}"
                sleep 1
                ;;
        esac
    done
}

main() {
    if [ "$1" = "menu" ] || [ -z "$1" ]; then
        if [ -x "$SCRIPT_PATH" ] && [ "$0" != "$SCRIPT_PATH" ]; then
            exec "$SCRIPT_PATH" menu
        else
            show_menu
        fi
    else
        case "$1" in
            monitor)
                monitor
                ;;
            install)
                install_script
                ;;
            uninstall)
                uninstall_script
                ;;
            help|--help|-h)
                show_usage
                ;;
            *)
                echo -e "${RED}ÈåØË™§: Êú™Áü•ÂëΩ‰ª§ (Unknown command '$1')${NC}"
                show_usage
                exit 1
                ;;
        esac
    fi
}

# Global arrays for host status and failure counts
declare -A FAILURE_COUNTS
declare -A HOST_STATUS

main "$1"